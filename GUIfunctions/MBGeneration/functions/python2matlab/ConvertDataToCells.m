function ConvertDataToCells(P)
%% This function will convert the .csv streamlines generated by Python to matrix arrays
    % Function created by Baptiste Heiles on 22/07/22
    % Last modified on 22/07/22
    % P : structure containg the parameters for the MB generation module
    
    
listCSV=dir([P.path_to_streams,'streamline*.csv']);

% The python script will spit out a number of streamlines for each source point defined
% This small script will split all the streamlines into different cells and save it as a matlab file
% The velocities are converted to m/s
for i_csv=1:size(listCSV,1)
    Streams=[];
    % Load in matrix
    A=readmatrix([P.path_to_streams,listCSV(i_csv).name]);
    
    % Convert units to seconds and meters
    A(:,1)=A(:,1).*P.t_scale;A(:,2:4)=A(:,2:4).*P.V_scale';
    A(:,5:7)=A(:,5:7).*P.X_scale';
    
    % Find the beginning of each streamline by taking the first integration
    % time equal to zero each time
    IntegrationTime=find(A(:,1)==0);
    NStreams=size(IntegrationTime,1);
    Streams=cell(NStreams,1);
    parfor i_time=2:NStreams
        lengthStreamline(i_time-1)=sum(vecnorm(diff(A(IntegrationTime(i_time-1):(IntegrationTime(i_time)-1),5:7),1),2,2))
        if (max(reshape(abs(A(IntegrationTime(i_time-1):(IntegrationTime(i_time)-1),2:4)),[],1))>P.minSpeed) && (lengthStreamline(i_time-1)>(P.minLength)) && ((IntegrationTime(i_time)-1-IntegrationTime(i_time-1))>0)
            Streams{i_time-1,1}=A(IntegrationTime(i_time-1):(IntegrationTime(i_time)-1),:);
        end
    end
    Streams=Streams(~cellfun(@isempty,Streams));
    waitbar(i_csv./size(listCSV,1));
    if size(Streams,1)>0
        save([P.path_to_streamsCells,'\Streams_',num2str(i_csv,'%04d'),'.mat'],'Streams');
    end
end
end
